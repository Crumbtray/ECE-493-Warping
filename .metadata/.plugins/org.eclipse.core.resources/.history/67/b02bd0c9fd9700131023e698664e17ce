package com.photofilter;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Stack;

import com.clintonwong.renderscripttest.ScriptC_transform;

import android.net.Uri;
import android.os.Bundle;
import android.provider.MediaStore;
import android.app.Activity;
import android.content.Intent;
import android.graphics.*;
import android.renderscript.Allocation;
import android.renderscript.Element;
import android.renderscript.RenderScript;
import android.renderscript.ScriptIntrinsicBlur;
import android.support.v4.view.GestureDetectorCompat;
import android.view.*;
import android.widget.ImageView;
import android.widget.Toast;

public class WarpActivity extends Activity implements GestureDetector.OnGestureListener, GestureDetector.OnDoubleTapListener {
	private Uri fileUri;
	private int undoSize;
	private ImageView warpImage;
	private Bitmap currentImage;
    private GestureDetectorCompat mDetector; 
    private Stack<Bitmap> undoStack;
    private RenderScript rs;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_warp);
		Intent intent = getIntent();
		fileUri = intent.getParcelableExtra("fileUri");
		undoSize = intent.getIntExtra("undoSize", 3);
		undoStack = new Stack<Bitmap>();
		try {
			Bitmap initialImage = MediaStore.Images.Media.getBitmap(this.getContentResolver(), fileUri);
			currentImage = initialImage;
			undoStack.push(initialImage);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		rs = RenderScript.create(this);
		warpImage = (ImageView) findViewById(R.id.warpImage);
		warpImage.setImageURI(fileUri);

		// Instantiate the gesture detector with the
        // application context and an implementation of
        // GestureDetector.OnGestureListener
        mDetector = new GestureDetectorCompat(this,this);
        // Set the gesture detector as the double tap
        // listener.
        mDetector.setOnDoubleTapListener(this);
	}
	
	
	@Override
    public boolean onOptionsItemSelected(MenuItem item)
    {
    	switch(item.getItemId()) {
    	case R.id.action_undo:
    		// Undo.
    		undo();
    		return true;
    	default:
    		return super.onOptionsItemSelected(item);
    	}
    }

	// Undo the picture!
	public void undo()
	{
		if(undoStack.size() == 1)
		{
			Toast.makeText(this, "Cannot undo!", Toast.LENGTH_SHORT).show();
		}
		else
		{
			Bitmap previousImage = undoStack.pop();
			warpImage.setImageBitmap(previousImage);
		}
	}
	
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.warp, menu);
		return true;
	}
	
    @Override 
    public boolean onTouchEvent(MotionEvent event){ 
        this.mDetector.onTouchEvent(event);
        // Be sure to call the superclass implementation
        return super.onTouchEvent(event);
    }

	@Override
	public boolean onDoubleTap(MotionEvent arg0) {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	public boolean onDoubleTapEvent(MotionEvent arg0) {
		Toast.makeText(this, "Double Tap!", Toast.LENGTH_SHORT).show();
		return true;
	}

	@Override
	public boolean onSingleTapConfirmed(MotionEvent arg0) {
		Toast.makeText(this, "Single Tap!", Toast.LENGTH_SHORT).show();
		return true;
	}

	@Override
	public boolean onDown(MotionEvent arg0) {
		return false;
	}

	@Override
	public boolean onFling(MotionEvent arg0, MotionEvent arg1, float arg2,
			float arg3) {
		Bitmap outputBitmap = currentImage.copy(currentImage.getConfig(), true);
		final Allocation input = Allocation.createFromBitmap(rs, currentImage, Allocation.MipmapControl.MIPMAP_NONE, Allocation.USAGE_SCRIPT);
        final Allocation output = Allocation.createTyped(rs, input.getType());
        
        // Transform the image
        //final ScriptC_transform script = new ScriptC_transform(rs, getResources(), R.raw.transform);
        final ScriptIntrinsicBlur script = ScriptIntrinsicBlur.create(rs, Element.U8_4(rs));
        script.setRadius(4f);
        script.setInput(input);
        script.forEach(output);
        
        //script.set_width(currentImage.getWidth());
        //script.set_height(currentImage.getHeight());
        //script.bind_input(input);
        //script.bind_output(output);
        //script.invoke_swirl(50);
        output.copyTo(outputBitmap);
        

        
        undoStack.push(outputBitmap);
        warpImage.setImageBitmap(outputBitmap);
        
		Toast.makeText(this, "Fling!", Toast.LENGTH_SHORT).show();
		return true;
	}

	@Override
	public void onLongPress(MotionEvent arg0) {
		Toast.makeText(this, "Long Press!", Toast.LENGTH_SHORT).show();
	}

	@Override
	public boolean onScroll(MotionEvent arg0, MotionEvent arg1, float arg2,
			float arg3) {
		//Toast.makeText(this, "Scroll!", Toast.LENGTH_SHORT).show();
		return true;
	}

	@Override
	public void onShowPress(MotionEvent arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public boolean onSingleTapUp(MotionEvent arg0) {
		// TODO Auto-generated method stub
		return true;
	}

}
