package com.photofilter;


import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;

import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.preference.PreferenceManager;
import android.provider.MediaStore;
import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.graphics.drawable.BitmapDrawable;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.ImageView;
import android.widget.Toast;

public class FilterMain extends Activity {
	private static int RESULT_LOAD_IMAGE = 1;
	private static int RESULT_SAVE_SETTINGS = 2;
	private Bitmap filteredImage;
	private int maskSize;
	private String filterType;
	private ProgressDialog pd;
	private Context context;
	private ImageView imageView;
	
    public static final int MEDIA_TYPE_IMAGE = 1;
    public static final int MEDIA_TYPE_VIDEO = 2;

    /** Create a file Uri for saving an image or video */
    private static Uri getOutputMediaFileUri(int type){
          return Uri.fromFile(getOutputMediaFile(type));
    }

    /** Create a File for saving an image or video */
    private static File getOutputMediaFile(int type){
        // To be safe, you should check that the SDCard is mounted
        // using Environment.getExternalStorageState() before doing this.

        File mediaStorageDir = new File(Environment.getExternalStoragePublicDirectory(
                  Environment.DIRECTORY_PICTURES), "MyCameraApp");
        // This location works best if you want the created images to be shared
        // between applications and persist after your app has been uninstalled.

        // Create the storage directory if it does not exist
        if (! mediaStorageDir.exists()){
            if (! mediaStorageDir.mkdirs()){
                Log.d("MyCameraApp", "failed to create directory");
                return null;
            }
        }

        // Create a media file name
        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
        File mediaFile;
        if (type == MEDIA_TYPE_IMAGE){
            mediaFile = new File(mediaStorageDir.getPath() + File.separator +
            "IMG_"+ timeStamp + ".jpg");
        } else if(type == MEDIA_TYPE_VIDEO) {
            mediaFile = new File(mediaStorageDir.getPath() + File.separator +
            "VID_"+ timeStamp + ".mp4");
        } else {
            return null;
        }

        return mediaFile;
    }
	
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        context = this;
        setContentView(R.layout.activity_filter_main);
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.filter_main, menu);
        return super.onCreateOptionsMenu(menu);
    }
    
    @Override
    public boolean onOptionsItemSelected(MenuItem item)
    {
    	switch(item.getItemId()) {
    	case R.id.action_choose_pic:
    		// We're going to get the picture here.
    		getPicture();
    		return true;
    	case R.id.action_choose_camera:
    		getCamera();
    		return true;
    	case R.id.action_settings:
    		// We're going to open the filter settings here.
    		openSettings();
    		return true;
    	case R.id.action_do_filter:
    		// We're going to apply the filter according to the settings.
    		applyFilter();
    	default:
    		return super.onOptionsItemSelected(item);
    	}
    }
    
    public void getCamera()
    {
    	Intent takePicture = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
    	Uri fileUri = getOutputMediaFileUri(MEDIA_TYPE_IMAGE);
    	takePicture.putExtra(MediaStore.EXTRA_OUTPUT, fileUri);
    	
    	startActivityForResult(takePicture, 0);
    }
    
    
    /*
     *  This method calls an external image app (Gallery, or Photo Gallery) to
     *  retrieve an image through the intent.
     */
    public void getPicture()
    {
    	Intent i = new Intent(Intent.ACTION_PICK, android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
    	startActivityForResult(i, RESULT_LOAD_IMAGE);
    }
    
    /*
     * This method is called when we return from the getPicture() action.
     * We shall obtain the image, and then show it in our ImageView.
     * @see android.app.Activity#onActivityResult(int, int, android.content.Intent)
     */
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
         
        if (requestCode == RESULT_LOAD_IMAGE && resultCode == RESULT_OK && null != data) {
            Uri selectedImage = data.getData();
            String[] filePathColumn = { MediaStore.Images.Media.DATA };
 
            Cursor cursor = getContentResolver().query(selectedImage,
                    filePathColumn, null, null, null);
            cursor.moveToFirst();
 
            int columnIndex = cursor.getColumnIndex(filePathColumn[0]);
            String picturePath = cursor.getString(columnIndex);
            cursor.close();
             
            imageView = (ImageView) findViewById(R.id.image);
            imageView.setImageBitmap(BitmapFactory.decodeFile(picturePath));
        }
        if(requestCode == 0 && resultCode == RESULT_OK && null != data) {
        	if(resultCode == RESULT_OK)
        	{
        		Toast.makeText(this, "Image saved to:\n"+ data.getData(), Toast.LENGTH_LONG).show();
        	}
        	
        	Uri selectedImage = data.getData();
        	imageView = (ImageView) findViewById(R.id.image);
        	imageView.setImageURI(selectedImage);
        }
    }
    
    /*
     * Start the Settings activity.
     */
    public void openSettings()
    {
    	Intent settingsIntent = new Intent(this, FilterSettingsActivity.class);
    	startActivityForResult(settingsIntent, RESULT_SAVE_SETTINGS);
    }
    
    public void applyFilter()
    {
    	
    }
}
